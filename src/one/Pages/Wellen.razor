@page "/wellen"
@using System.Security.Cryptography

<div class="inputs">
    <p>Wind in m/s: <input @bind="V" /></p>
    <p>Wassertiefe [m]: <input @bind="T" /></p>
    <p>Windlaufstrecke [m]: <input @bind="L" /><input class="helpcheck" id="help" type="checkbox" @bind="help" /><label for="help">?</label></p>
    @if (help)
    {<p>Die Strecke die der Wind übers Wasser weht</p>}
    <p>Breitengrad bekannt? <input type="checkbox" @bind="bgiv" /></p>
    @if (bgiv)
    {<p>Breitengrad: <input @bind="b" /></p>}
    <p>Höhe bekannt? <input type="checkbox" @bind="hgiv" /></p>
    @if (hgiv)
    {<p>Höhe: <input @bind="H" /></p>}
    <button @onclick="Calc">Berechnen</button>
</div>
<div class="solutions">
    <h4>Durchschnittshöhe: @(r(ho)) m</h4>
    <h4>Signifikante Höhe: @(r(hs)) m</h4>
    <h4>Grösste 10% am Tag: @(r(h10)) m</h4>
    <h4>3 grössten am Tag: @(r(hm)) m</h4>
    <h4>Wellenzeitabstand: @(r(z)) s</h4>
    <h4>Pro Sekunde: @(r(f)) Wellen</h4>
    <h4>Wellengeschwindigkeit: @(r(C)) m/s</h4>
    <h4>Wellenabstand: @(r(h)) m</h4>
    <h4>Tiefster spürbarer Punkt: -@(r(i)) m</h4>
    <h4>Durschnittsbrechtiefe: @(r(bws/2)) m</h4>
    <h4>Signifikante Brechtiefe: @(r(bws)) m</h4>
    <h4>Brechtiefe obere 10%: @(r(bws*1.3)) m</h4>
    <h4>Brechtiefe der grössten: @(r(bws*2)) m</h4>
</div>



@code
{
    double V { get; set; }
    double T { get; set; }
    double L { get; set; }
    double b { get; set; }
    double H { get; set; }
    const double e = Math.E;
    const double pi = Math.PI;
    bool help { get; set; }
    bool bgiv { get; set; }
    bool hgiv { get; set; }
    double C { get; set; }
    double z { get; set; }
    double f { get; set; }
    double hs { get; set; }
    double ho { get; set; }
    double h10 { get; set; }
    double hm { get; set; }
    double v { get; set; }
    double bws { get; set; }
    double h { get; set; }
    double i { get; set; }

    double p(double x,double y)
    {
        return Math.Pow(x, y);
    }

    double ln(double x)
    {
        return Math.Log(x);
    }

    double th(double x)
    {
        return (p(e,x)-p(e,-x))/(p(e,x)+p(e,-x));
    }

    double r(double x)
    {
        return Math.Round(x, 2);
    }


    void Calc()
    {
        if (!bgiv) { b=0; }
        if (!hgiv) { h=0; }
        z = 0.546 * p(V, 1.23) * th(2.54 * p(T, 0.375) / p(V, 0.923)) * th(0.102 * p(L, 1.0 / 3.0) / (p(V, 0.82) * th(2.54 * p(T, 0.375) / p(V, 0.923))));
        f = 1 / z;
        hs = 0.0145 * p(V, 2.46) * th(5.75 * p(T, 0.75) / p(V, 1.845)) * th(0.029 * p(L, 0.5) / (p(V, 1.23) * th(5.75 * p(T, 0.75) / p(V, 1.845))));
        ho = hs / 2;
        h10 = 1.3 * hs;
        hm = 2 * hs;
        double g = 6.67408 * Math.Pow(10, 13) * 5.972 / (Math.Pow((6371000 / (1 + 0.002665 * Math.Cos(2 * Math.PI * b / 180)) + H), 2));
        v = p(g * th(2 * pi * f) / (2 * pi * f * f), 0.5);
        if (v / f < 20 * T) { C = v; }
        else { C=p(g *T,0.5);}
        bws = hs / 1.3;
        h = C * z;
        i = h / 2;
    }
}