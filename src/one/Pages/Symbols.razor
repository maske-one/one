@page "/symbols"

<div class="nconv">
    <p><input @bind="nin"/></p>
    @for (var t = 0; t < Inlist.Count(); t++)
    {
        <p>@Inlist[t]</p>
    }
    <table>
        @for (var i = 0; i < ti; i++)
        {
            <tr>
                @for (var j = 0; j < di; j++)
                {
                    <td><a href=@stest[Inlist[i * di + j]]></a></td>
                }
            </tr>
        }
    </table>
    <button @onclick="@Calc"><h1>Umrechnen</h1></button>
</div>

@code
{

    double nin = 0;
    int ti = 1;
    int di = 0;
    bool comma = false;
    double curr = 0;
    string stest = "assets/resources/symbols/a.svg";
    List<string> Slist = new List<string>();
    List<int> Inlist = new List<int>();


    void Calc()
    {
        Inlist.Clear();
        Slist.Clear();
        Slist.Add("a.svg");
        Slist.Add("ae.svg");
        Slist.Add("ai.svg");
        Slist.Add("b.svg");
        Slist.Add("break.svg");
        Slist.Add("comma.svg");
        Slist.Add("d.svg");
        Slist.Add("e.svg");
        Slist.Add("ei.svg");
        Slist.Add("eo.svg");
        Slist.Add("eu.svg");
        Slist.Add("f.svg");
        Slist.Add("g.svg");
        Slist.Add("h.svg");
        Slist.Add("i.svg");
        Slist.Add("i.svg");
        Slist.Add("ia.svg");
        Slist.Add("ie2.svg");
        Slist.Add("io.svg");
        Slist.Add("iu.svg");
        Slist.Add("k.svg");
        Slist.Add("l.svg");
        Slist.Add("m.svg");
        Slist.Add("n.svg");
        Slist.Add("o.svg");
        Slist.Add("oe.svg");
        Slist.Add("oi.svg");
        Slist.Add("p.svg");
        Slist.Add("point.svg");
        Slist.Add("r.svg");
        Slist.Add("s.svg");
        Slist.Add("t.svg");
        Slist.Add("u.svg");
        Slist.Add("ue.svg");
        Slist.Add("ui.svg");
        Slist.Add("v.svg");
        Slist.Add("w.svg");
        Slist.Add("z.svg");

        while (true)
        {
            curr = nin;
            if (nin > 0)
            {
                while (curr>11)
                {
                    curr = curr / 12;
                }
                Inlist.Add((int) curr);
                nin /= 12;
            }
            else
            {
                if (comma)
                {
                    di = Inlist.Count();
                    return;
                }
                comma = true;
                nin *= 1000;
            }

        }
    }

}
